{"version":3,"sources":["redux/actions.ts","components/counterSettings/valueSettings/ValueSettings.tsx","components/counter/button/Button.tsx","components/counterSettings/CounterSettings.tsx","components/counter/displayMode/DisplayMode.tsx","components/counter/Counter.tsx","App.tsx","reportWebVitals.ts","redux/CounterReducer.ts","redux/store.ts","utils/localstorage-utils.ts","index.tsx","components/counter/Counter.module.css","components/counterSettings/valueSettings/ValueSettings.module.css","components/counter/displayMode/DisplayMode.module.css","components/counter/button/Button.module.css"],"names":["COUNTER_ACTIONS","increaseCounterAC","counter","type","INCREASE_COUNTER","payload","changeValueErrorAC","errorMessage","CHANGE_VALUE_ERROR","editStartMaxValuerAC","editStartMaxValue","EDIT_START_MAX_VALUE","ValueSettings","dispatch","useDispatch","startValue","useSelector","state","maxValue","useEffect","classNameInput","s","input_value","incorrect_value","className","value_container","values_position","value","onChange","e","CHANGE_MAX_VALUE","changeMaxValueAC","currentTarget","CHANGE_START_VALUE","changeStartValueAC","Button","props","disabledSet","button","disabledIncReset","disabledInc","disabledBtns","btn_container","btn","btn_disabled","onClick","disabled","CounterSettings","counter_container","DisplayMode","messageClass","message_set_value","red","counterClass","amount","textMessage","useMemo","display_container","Counter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6635cbfa.chunk.js","sourcesContent":["export enum COUNTER_ACTIONS {\r\n  'CHANGE_START_VALUE' = 'counter/actions/change-start-value',\r\n  'CHANGE_MAX_VALUE' = 'counter/actions/change-max-value',\r\n  'INCREASE_COUNTER' = 'counter/actions/increase-counter',\r\n  'CHANGE_VALUE_ERROR' = 'counter/actions/change-value-error',\r\n  'EDIT_START_MAX_VALUE' = 'counter/actions/edit-start-max-value',\r\n}\r\nexport type ActionsType = ChangeStartValueType\r\n  | ChangeMaxValueType\r\n  | IncreaseCounterType\r\n  | ChangeValueErrorType\r\n  | EditStartMaxValueType\r\n\r\n\r\ntype ChangeStartValueType = {\r\n  type: COUNTER_ACTIONS.CHANGE_START_VALUE\r\n  payload: {\r\n    startValue: number\r\n  }\r\n}\r\n\r\nexport const changeStartValueAC = (startValue: number): ChangeStartValueType => {\r\n  return {\r\n    type: COUNTER_ACTIONS.CHANGE_START_VALUE,\r\n    payload: {\r\n      startValue: startValue\r\n    }\r\n  }\r\n}\r\n\r\ntype ChangeMaxValueType = {\r\n  type: COUNTER_ACTIONS.CHANGE_MAX_VALUE\r\n  payload: {\r\n    maxValue: number\r\n  }\r\n}\r\n\r\nexport const changeMaxValueAC = (maxValue: number): ChangeMaxValueType => {\r\n  return {\r\n    type: COUNTER_ACTIONS.CHANGE_MAX_VALUE,\r\n    payload: {\r\n      maxValue\r\n    }\r\n  }\r\n}\r\n\r\ntype IncreaseCounterType = {\r\n  type: COUNTER_ACTIONS.INCREASE_COUNTER\r\n  payload: {\r\n    counter: number\r\n  }\r\n}\r\n\r\nexport const increaseCounterAC = (counter: number): IncreaseCounterType => {\r\n  return {\r\n    type: COUNTER_ACTIONS.INCREASE_COUNTER,\r\n    payload: {\r\n      counter\r\n    }\r\n  }\r\n}\r\n\r\ntype ChangeValueErrorType = {\r\n  type: COUNTER_ACTIONS.CHANGE_VALUE_ERROR\r\n  payload: {\r\n    errorMessage: boolean\r\n  }\r\n}\r\n\r\nexport const changeValueErrorAC = (errorMessage: boolean): ChangeValueErrorType => {\r\n  return {\r\n    type: COUNTER_ACTIONS.CHANGE_VALUE_ERROR,\r\n    payload: {\r\n      errorMessage\r\n    }\r\n  }\r\n}\r\n\r\ntype EditStartMaxValueType = {\r\n  type: COUNTER_ACTIONS.EDIT_START_MAX_VALUE\r\n  payload: {\r\n    editStartMaxValue: boolean\r\n  }\r\n}\r\n\r\nexport const editStartMaxValuerAC = (editStartMaxValue: boolean): EditStartMaxValueType => {\r\n  return {\r\n    type: COUNTER_ACTIONS.EDIT_START_MAX_VALUE,\r\n    payload: {\r\n      editStartMaxValue\r\n    }\r\n  }\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect} from \"react\";\r\nimport s from \"./ValueSettings.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n  changeValueErrorAC,\r\n  changeMaxValueAC,\r\n  changeStartValueAC,\r\n  editStartMaxValuerAC, ActionsType\r\n} from \"../../../redux/actions\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\n\r\nexport const ValueSettings = () => {\r\n  const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n  const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n  const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n  const errorMessage = useSelector<AppStateType, boolean>(state => state.counter.errorMessage)\r\n\r\n  useEffect(() => {\r\n    startValue >= maxValue || startValue < 0 || maxValue <= 0\r\n      ? dispatch(changeValueErrorAC(true))\r\n      : dispatch(changeValueErrorAC(false))\r\n  }, [startValue, maxValue])\r\n\r\n  const classNameInput = `${s.input_value} ${errorMessage ? s.incorrect_value : ''}`\r\n\r\n  const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(changeMaxValueAC(+e.currentTarget.value))\r\n    dispatch(editStartMaxValuerAC(true))\r\n  }\r\n\r\n  const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(changeStartValueAC(+e.currentTarget.value))\r\n    dispatch(editStartMaxValuerAC(true))\r\n  }\r\n\r\n  return (\r\n    <div className={s.value_container}>\r\n      <div className={s.values_position}>\r\n        <p>max value:</p>\r\n        <input type={\"number\"}\r\n               className={classNameInput}\r\n               value={maxValue}\r\n               onChange={changeMaxValue}\r\n        />\r\n      </div>\r\n\r\n      <div className={s.values_position}>\r\n        <p>start value:</p>\r\n        <input type={\"number\"}\r\n               className={classNameInput}\r\n               value={startValue}\r\n               onChange={changeStartValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport s from \"./Button.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType, editStartMaxValuerAC, increaseCounterAC} from \"../../../redux/actions\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\n\r\n\r\ntype ButtonPropsType = {\r\n  button: \"inc\" | \"reset\" | \"set\"\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n  const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n  const counter = useSelector<AppStateType, number>(state => state.counter.counter)\r\n  const editStartMaxValue = useSelector<AppStateType, boolean>(state => state.counter.editStartMaxValue)\r\n  const errorMessage = useSelector<AppStateType, boolean>(state => state.counter.errorMessage)\r\n  const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n  const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n\r\n  const disabledSet = props.button === \"set\" && !editStartMaxValue\r\n  const disabledIncReset = props.button !== \"set\" && editStartMaxValue || errorMessage\r\n  const disabledInc = props.button === \"inc\" && counter === maxValue\r\n\r\n  const disabledBtns = disabledSet || disabledInc || disabledIncReset\r\n\r\n  const buttonView = () => {\r\n    switch (props.button) {\r\n      case 'inc':\r\n        counter < maxValue && dispatch(increaseCounterAC(counter + 1))\r\n        break\r\n      case 'reset':\r\n        dispatch(increaseCounterAC(startValue))\r\n        break\r\n      case 'set':\r\n        dispatch(editStartMaxValuerAC(false))\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={s.btn_container}>\r\n      <button className={`${s.btn} ${disabledBtns && s.btn_disabled}`}\r\n              onClick={buttonView}\r\n              disabled={disabledBtns}\r\n      >\r\n        {props.button}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './../counter/Counter.module.css'\r\nimport {ValueSettings} from \"./valueSettings/ValueSettings\";\r\nimport {Button} from \"../counter/button/Button\";\r\n\r\n\r\n\r\nexport const CounterSettings = () => {\r\n  return (\r\n    <div className={s.counter_container}>\r\n      <ValueSettings/>\r\n      <div className={s.btn_container}>\r\n        <Button button={\"set\"}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {useMemo} from \"react\";\r\nimport s from \"./DisplayMode.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsType, increaseCounterAC} from \"../../../redux/actions\";\r\nimport {AppStateType} from \"../../../redux/store\";\r\n\r\n\r\n\r\nexport const DisplayMode = () => {\r\n  const dispatch = useDispatch<Dispatch<ActionsType>>()\r\n  const counter = useSelector<AppStateType, number>(state => state.counter.counter)\r\n  const errorMessage = useSelector<AppStateType, boolean>(state => state.counter.errorMessage)\r\n  const maxValue = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n  const editStartMaxValue = useSelector<AppStateType, boolean>(state => state.counter.editStartMaxValue)\r\n  const startValue = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n\r\n\r\n  const messageClass = `${s.message_set_value} ${errorMessage && s.red}`\r\n  const counterClass = `${s.amount} ${counter === maxValue && s.red}`\r\n\r\n  const textMessage = editStartMaxValue && (errorMessage ? 'Incorrect value!' : 'Enter values and press \\'set\\'')\r\n\r\n  useMemo(() => {\r\n    dispatch(increaseCounterAC(startValue))\r\n  }, [editStartMaxValue])\r\n\r\n  return (\r\n    <div className={s.display_container}>\r\n            <span className={counterClass}>\r\n                {!editStartMaxValue && counter}\r\n            </span>\r\n      <p className={messageClass}>{textMessage}</p>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport s from './Counter.module.css'\r\nimport {DisplayMode} from \"./displayMode/DisplayMode\";\r\nimport {Button} from \"./button/Button\";\r\n\r\n\r\nexport const Counter = () => {\r\n  return (\r\n    <div className={s.counter_container}>\r\n      <DisplayMode/>\r\n\r\n      <div className={s.btn_container}>\r\n        <Button button={\"inc\"}/>\r\n        <Button button={\"reset\"}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport {CounterSettings} from \"./components/counterSettings/CounterSettings\";\nimport {Counter} from \"./components/counter/Counter\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <CounterSettings/>\n      <Counter/>\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsType, COUNTER_ACTIONS} from \"./actions\";\r\n\r\n\r\nexport type initialStateType = {\r\n  startValue: number\r\n  maxValue: number\r\n  counter: number\r\n  editStartMaxValue: boolean\r\n  errorMessage: boolean\r\n}\r\n\r\nlet initialState: initialStateType = {\r\n  startValue: 0,\r\n  maxValue: 5,\r\n  counter: 0,\r\n  errorMessage: false,\r\n  editStartMaxValue: false,\r\n}\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case COUNTER_ACTIONS.CHANGE_START_VALUE: {\r\n      return {\r\n        ...state,\r\n        startValue: action.payload.startValue\r\n      }\r\n    }\r\n    case COUNTER_ACTIONS.CHANGE_MAX_VALUE: {\r\n      return {\r\n        ...state,\r\n        maxValue: action.payload.maxValue\r\n      }\r\n    }\r\n    case COUNTER_ACTIONS.INCREASE_COUNTER: {\r\n      return {\r\n        ...state,\r\n        counter: action.payload.counter\r\n      }\r\n    }\r\n    case COUNTER_ACTIONS.CHANGE_VALUE_ERROR: {\r\n      return {\r\n        ...state,\r\n        errorMessage: action.payload.errorMessage\r\n      }\r\n    }\r\n    case COUNTER_ACTIONS.EDIT_START_MAX_VALUE: {\r\n      return {\r\n        ...state,\r\n        editStartMaxValue: action.payload.editStartMaxValue\r\n      }\r\n    }\r\n    default :\r\n      return state\r\n  }\r\n}","import {combineReducers, createStore} from \"redux\";\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\nimport {counterReducer} from \"./CounterReducer\";\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState())\r\n\r\nstore.subscribe(() => {\r\n  saveState({\r\n    counter: store.getState().counter\r\n  });\r\n})","import { AppStateType } from \"../redux/store\";\r\n\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('app-state');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('app-state', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_container\":\"Counter_counter_container__t9ViT\",\"btn_container\":\"Counter_btn_container__1CqUu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"value_container\":\"ValueSettings_value_container__1B1oc\",\"values_position\":\"ValueSettings_values_position__3IknJ\",\"input_value\":\"ValueSettings_input_value__1hW0v\",\"incorrect_value\":\"ValueSettings_incorrect_value__1weCM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display_container\":\"DisplayMode_display_container__2u21s\",\"amount\":\"DisplayMode_amount__2o9d6\",\"message_set_value\":\"DisplayMode_message_set_value__12Lam\",\"red\":\"DisplayMode_red__A6gh_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__17p8R\",\"btn_disabled\":\"Button_btn_disabled__yyyfU\"};"],"sourceRoot":""}