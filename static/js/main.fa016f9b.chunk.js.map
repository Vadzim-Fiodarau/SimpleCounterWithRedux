{"version":3,"sources":["redux/CountReducer.ts","counter/Counter.tsx","settings/Settings.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","utils/localstorage-utils.ts","index.tsx"],"names":["INCREMENT_VALUE","RESET_COUNT","START_VALUE","MAX_VALUE","SET_BUTTON","INCREMENT_BUTTON","SET_VALUE_FROM_LOCAL_STORAGE","SET_START_VALUE_FROM_LOCAL_STORAGE","SET_MAX_VALUE_FROM_LOCAL_STORAGE","ENTER_VALUE","initialState","value","startValue","maxValue","enterValue","incDisable","resDisable","setDisable","Counter","props","counter","useSelector","state","startValueCount","maxValueCount","disableForIncrementButton","disableForResetButton","currentValue","disabledForIncBtn","classForCurrentValue","className","onClick","incCounterValue","disabled","setResetValue","Settings","disableForSetButton","incorrectInput","classForMaxValueInput","classForStartValueInput","disabledForSetBtn","type","onChange","changeHandlerMaxValue","changeHandlerStartValue","setNewCounterValue","App","dispatch","useDispatch","e","currentTarget","valueAsNumber","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa016f9b.chunk.js","sourcesContent":["// ACTION_TYPE\r\nconst INCREMENT_VALUE = 'INCREMENT-VALUE'\r\nconst RESET_COUNT = 'RESET-COUNT'\r\nconst START_VALUE = 'START-VALUE'\r\nconst MAX_VALUE = 'MAX-VALUE'\r\nconst SET_BUTTON = 'SET-BUTTON'\r\nconst INCREMENT_BUTTON = 'INCREMENT-BUTTON'\r\nconst SET_VALUE_FROM_LOCAL_STORAGE = 'SET-VALUE-FROM-LOCAL-STORAGE'\r\nconst SET_START_VALUE_FROM_LOCAL_STORAGE = 'SET_START_VALUE_FROM_LOCAL_STORAGE'\r\nconst SET_MAX_VALUE_FROM_LOCAL_STORAGE = 'SET_MAX_VALUE_FROM_LOCAL_STORAGE'\r\nconst ENTER_VALUE = 'ENTER_VALUE'\r\n\r\n\r\n//ACTION_CREATE\r\nexport type incrementCounterType = ReturnType<typeof incrementValue>\r\nexport const incrementValue = () => {\r\n  return {\r\n    type: INCREMENT_VALUE\r\n  } as const\r\n}\r\nexport type resetCounterType = ReturnType<typeof resetCounter>\r\nexport const resetCounter = () => {\r\n  return {\r\n    type: RESET_COUNT\r\n  } as const\r\n}\r\nexport type setValueFromLocalStorageType = ReturnType<typeof setValueFromLocalStorage>\r\nexport const setValueFromLocalStorage = (value: number) => {\r\n  return {\r\n    type: SET_VALUE_FROM_LOCAL_STORAGE,\r\n    value\r\n  } as const\r\n}\r\nexport type setStartValueFromLocalStorageType = ReturnType<typeof setStartValueFromLocalStorage>\r\nexport const setStartValueFromLocalStorage = (value: number) => {\r\n  return {\r\n    type: SET_START_VALUE_FROM_LOCAL_STORAGE,\r\n    value\r\n  } as const\r\n}\r\nexport type setMaxValueFromLocalStorageType = ReturnType<typeof setMaxValueFromLocalStorage>\r\nexport const setMaxValueFromLocalStorage = (value: number) => {\r\n  return {\r\n    type: SET_MAX_VALUE_FROM_LOCAL_STORAGE,\r\n    value\r\n  } as const\r\n}\r\nexport type maxValueType = ReturnType<typeof maxValue>\r\nexport const maxValue = (value: number) => {\r\n  return {\r\n    type: MAX_VALUE,\r\n    value\r\n  } as const\r\n}\r\nexport type startValueType = ReturnType<typeof startValue>\r\nexport const startValue = (value: number) => {\r\n  return {\r\n    type: START_VALUE,\r\n    value\r\n  } as const\r\n}\r\nexport type setButtonType = ReturnType<typeof setButton>\r\nexport const setButton = () => {\r\n  return {\r\n    type: SET_BUTTON,\r\n  } as const\r\n}\r\n\r\nexport type setIncrementButtonType = ReturnType<typeof setIncrementButton>\r\nexport const setIncrementButton = () => {\r\n  return {\r\n    type: INCREMENT_BUTTON,\r\n  } as const\r\n}\r\nexport type enterValueType = ReturnType<typeof enterValue>\r\nexport const enterValue = (value: string) => {\r\n  return {\r\n    type: ENTER_VALUE,\r\n    value\r\n  } as const\r\n}\r\n\r\nexport type initialStateType = typeof initialState\r\nlet initialState = {\r\n  value: 0,\r\n  startValue: 0,\r\n  maxValue: 1,\r\n  enterValue: '',\r\n  incDisable: false,\r\n  resDisable: false,\r\n  setDisable: false,\r\n}\r\n\r\n// ACTION_TYPES\r\nexport type ActionTypes =\r\n  incrementCounterType\r\n  | resetCounterType\r\n  | startValueType\r\n  | maxValueType\r\n  | setButtonType\r\n  | setValueFromLocalStorageType\r\n  | setIncrementButtonType\r\n  | setStartValueFromLocalStorageType\r\n  | setMaxValueFromLocalStorageType\r\n  | enterValueType\r\n\r\nexport const countReducer = (state: initialStateType = initialState, action: ActionTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case INCREMENT_VALUE: {\r\n      return {\r\n        ...state,\r\n        value: state.value + 1\r\n      }\r\n    }\r\n    case RESET_COUNT: {\r\n      return {\r\n        ...state, value: state.value = state.startValue\r\n      }\r\n    }\r\n    case SET_VALUE_FROM_LOCAL_STORAGE: {\r\n      return {\r\n        ...state, value: action.value\r\n      }\r\n    }\r\n    case SET_START_VALUE_FROM_LOCAL_STORAGE: {\r\n      return {\r\n        ...state, value: action.value\r\n      }\r\n    }\r\n    case SET_MAX_VALUE_FROM_LOCAL_STORAGE: {\r\n      return {\r\n        ...state, value: action.value\r\n      }\r\n    }\r\n    case MAX_VALUE: {\r\n      return {\r\n        ...state,\r\n        maxValue: action.value,\r\n        setDisable: false,\r\n        incDisable: true,\r\n        resDisable: true,\r\n      }\r\n    }\r\n    case START_VALUE: {\r\n      return {\r\n        ...state,\r\n        startValue: action.value,\r\n        setDisable: false,\r\n        incDisable: true,\r\n        resDisable: true,\r\n      }\r\n    }\r\n    case SET_BUTTON: {\r\n      return {\r\n        ...state,\r\n        value: state.startValue,\r\n        setDisable: true,\r\n        incDisable: false,\r\n        resDisable: false\r\n      }\r\n    }\r\n    case INCREMENT_BUTTON: {\r\n      return {\r\n        ...state,\r\n        setDisable: true,\r\n        incDisable: false,\r\n        resDisable: false\r\n      }\r\n    }\r\n    case ENTER_VALUE: {\r\n      return {\r\n        ...state,\r\n        enterValue: action.value,\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//THUNK\r\n\r\n// export const incrementValueTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n//   let currentValue = getState().counter.value\r\n//   localStorage.setItem('currentValue', JSON.stringify(currentValue + 1))\r\n//   dispatch(incrementValue())\r\n// }\r\n// export const currentStartValueTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n//   let currenStartValue = getState().counter.startValue\r\n//   localStorage.setItem('currentStartValue', JSON.stringify(currenStartValue))\r\n//   dispatch(startValue(currenStartValue))\r\n// }\r\n// export const currentMaxValueTC = () => (dispatch: Dispatch, getState: () => AppStateType) => {\r\n//   let currentMaxValue = getState().counter.maxValue\r\n//   localStorage.setItem('currentMaxValue', JSON.stringify(currentMaxValue))\r\n//   dispatch(maxValue(currentMaxValue))\r\n// }\r\n\r\n\r\n// export const setValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//   let valueAsString = localStorage.getItem('currentValue')\r\n//\r\n//   if (valueAsString) {\r\n//     let newValue = JSON.parse(valueAsString)\r\n//     dispatch(setValueFromLocalStorage(newValue))\r\n//   }\r\n// }\r\n//\r\n// export const setStartValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//   let startValueAsString = localStorage.getItem('currentStartValue')\r\n//\r\n//   if (startValueAsString) {\r\n//     let newValue = JSON.parse(startValueAsString)\r\n//     dispatch(setValueFromLocalStorage(newValue))\r\n//   }\r\n// }\r\n// export const setMaxValueFromLocalStorageTC = () => (dispatch: Dispatch) => {\r\n//\r\n//   let maxValueAsString = localStorage.getItem('currentMaxValue')\r\n//\r\n//   if (maxValueAsString) {\r\n//     let newValue = JSON.parse(maxValueAsString)\r\n//     dispatch(setValueFromLocalStorage(newValue))\r\n//   }\r\n// }\r\n\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\n\r\ntype CounterType = {\r\n  setResetValue: () => void\r\n  incCounterValue: () => void\r\n}\r\n\r\nexport const Counter = (props: CounterType) => {\r\n  let counter = useSelector<AppStateType, number>(state => state.counter.value)\r\n  let startValueCount = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n  let maxValueCount = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n  let disableForIncrementButton = useSelector<AppStateType, boolean>(state => state.counter.incDisable)\r\n  let disableForResetButton = useSelector<AppStateType, boolean>(state => state.counter.resDisable)\r\n  let enterNewValue = useSelector<AppStateType, string>(state => state.counter.enterValue) // Как вывести значение \"enter new value and pres 'set'\" вместо счетчика\r\n  const currentValue = startValueCount === maxValueCount || maxValueCount < startValueCount ?\r\n    <div>Incorrect value</div> : counter\r\n  const classes = counter >= 0 ? true : undefined\r\n  const classesRes = classes ? 'button-res' : 'button-res'\r\n  const disabledForIncBtn = counter === maxValueCount\r\n    ? true\r\n    : disableForIncrementButton\r\n  const classForCurrentValue = counter == maxValueCount ? 'red' : ''\r\n\r\n  return (\r\n    <div className={'wrapper-counter'}>\r\n\r\n      <div className={'counter'}>\r\n        <div className={classForCurrentValue}>\r\n          <h1>{currentValue}</h1>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={'wrapper-inc-res'}>\r\n        <div className={'wrap-button-inc'}>\r\n          <button\r\n            className={'button-inc'}\r\n            onClick={props.incCounterValue}\r\n            disabled={disabledForIncBtn}>INC\r\n          </button>\r\n        </div>\r\n\r\n        <div className={'wrap-button-res'}>\r\n          <button\r\n            className={classesRes}\r\n            onClick={props.setResetValue}\r\n            disabled={disableForResetButton}>RES\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype SettingsType = {\r\n  changeHandlerStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  changeHandlerMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n  setNewCounterValue: () => void\r\n}\r\n\r\nexport const Settings = (props: SettingsType) => {\r\n\r\n  let disableForSetButton = useSelector<AppStateType, boolean>(state => state.counter.setDisable)\r\n  let startValueCount = useSelector<AppStateType, number>(state => state.counter.startValue)\r\n  let maxValueCount = useSelector<AppStateType, number>(state => state.counter.maxValue)\r\n  const incorrectInput = maxValueCount <= startValueCount ? 'inputError' : ''\r\n  const classForMaxValueInput = maxValueCount < 0 || incorrectInput ? 'inputError' : 'border'\r\n  const classForStartValueInput  = startValueCount < 0 || incorrectInput ? 'inputError' : 'border'\r\n  const disabledForSetBtn = startValueCount === maxValueCount || maxValueCount < startValueCount\r\n    ? true\r\n    : disableForSetButton\r\n\r\n  return (\r\n    <div className={'set-wrapper-counter'}>\r\n      <div className={'set-counter'}>\r\n        <div className={'set-input'}>\r\n          <h3>\r\n            max value :\r\n            <input\r\n              type={\"number\"}\r\n                   onChange={props.changeHandlerMaxValue}\r\n                   value={maxValueCount}\r\n                   className={classForMaxValueInput}/>\r\n          </h3>\r\n\r\n          <h3>start value :\r\n            <input type={\"number\"}\r\n                   onChange={props.changeHandlerStartValue}\r\n                   value={startValueCount}\r\n                   className={classForStartValueInput}/>\r\n          </h3>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={'set-wrapper'}>\r\n        <div className={'wrap-button-set'}>\r\n          <button\r\n            className={'button-set'}\r\n            onClick={props.setNewCounterValue}\r\n            disabled={disabledForSetBtn}>SET\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {\n  incrementValue,\n  maxValue,\n  resetCounter,\n  setButton,\n  startValue,\n} from \"./redux/CountReducer\";\nimport {Counter} from \"./counter/Counter\";\nimport {Settings} from \"./settings/Settings\";\n\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const changeHandlerStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const currentTarget = e.currentTarget.valueAsNumber;\n      dispatch(startValue(currentTarget))\n  }\n  const changeHandlerMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const currentTarget = e.currentTarget.valueAsNumber;\n    dispatch((maxValue(currentTarget)))\n  }\n  const setNewCounterValue = () => {\n    dispatch(setButton())\n  }\n  const setResetValue = () => {\n    dispatch(resetCounter())\n  }\n  const incCounterValue = () => {\n    dispatch(incrementValue())\n  }\n\n  return (\n    <div className={'App'}>\n      <Settings\n        changeHandlerStartValue={changeHandlerStartValue}\n        changeHandlerMaxValue={changeHandlerMaxValue}\n        setNewCounterValue={setNewCounterValue}\n      />\n      <Counter\n        setResetValue={setResetValue}\n        incCounterValue={incCounterValue}\n      />\n    </div>\n  )\n}\n\nexport default App\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {countReducer} from \"./CountReducer\";\r\nimport thunk from 'redux-thunk'\r\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: countReducer,\r\n})\r\nexport const store = createStore(rootReducer, loadState(), applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n  saveState(\r\n    {\r\n    counter: store.getState().counter,\r\n  })\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import {AppStateType} from \"../redux/store\";\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('app-state');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('app-state', serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}